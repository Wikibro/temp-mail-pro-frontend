import React, { useState, useEffect } from "react";
import axios from "axios";
import { BrowserRouter as Router, Routes, Route, Link, useLocation } from "react-router-dom";
import { Helmet } from "react-helmet";

import AccountManager from "./components/AccountManager.jsx";
import Inbox from "./components/Inbox.jsx";
import Privacy from "./components/Privacy";
import BlogPost from "./components/BlogPost";
import LandingPage from "./components/Landing.jsx";
import Footer from "./components/Footer";
import index f

const API_BASE = import.meta.env.VITE_API_BASE;

// Email Card Component
const EmailCard = ({ email, expiration, isActive = false, onDelete }) => {
  const formatTimeRemaining = (expirationDate) => {
    const now = new Date();
    const expiry = new Date(expirationDate);
    const diffMs = expiry - now;
    
    if (diffMs <= 0) return "Expired";
    
    const hours = Math.floor(diffMs / (1000 * 60 * 60));
    const minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
    
    if (hours > 0) {
      return `${hours}h ${minutes}m remaining`;
    }
    return `${minutes}m remaining`;
  };

  return (
    <div className={`card h-100 ${isActive ? 'border-primary' : ''}`}>
      <div className="card-body">
        <div className="d-flex justify-content-between align-items-start mb-2">
          <h6 className="card-title text-truncate flex-grow-1 me-2">{email}</h6>
          {onDelete && (
            <button 
              className="btn btn-sm btn-outline-danger"
              onClick={onDelete}
              title="Delete this email"
              aria-label="Delete email"
            >
              <i className="bi bi-x-lg"></i>
            </button>
          )}
        </div>
        <div className="d-flex justify-content-between align-items-center mb-2">
          <small className="text-muted">Expires:</small>
          <small className={expiration && new Date(expiration) < new Date() ? 'text-danger' : 'text-success'}>
            {expiration ? formatTimeRemaining(expiration) : 'Unknown'}
          </small>
        </div>
        {isActive && (
          <div className="badge bg-success w-100">Active Email</div>
        )}
      </div>
    </div>
  );
};

function TempMailApp() {
  const [account, setAccount] = useState(() => {
    const saved = localStorage.getItem("tempMailAccount");
    return saved ? JSON.parse(saved) : null;
  });
  const [generatedEmails, setGeneratedEmails] = useState(() => {
    const saved = localStorage.getItem("generatedEmails");
    return saved ? JSON.parse(saved) : [];
  });
  const [messages, setMessages] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [darkMode, setDarkMode] = useState(() => {
    const saved = localStorage.getItem("darkMode");
    return saved === "true";
  });
  const [emailDuration, setEmailDuration] = useState(() => {
    const saved = localStorage.getItem("emailDuration");
    return saved || "1hour";
  });
  const [isNavExpanded, setIsNavExpanded] = useState(false);

  const location = useLocation();
  const isAppPage = location.pathname === "/app";

  const toggleDarkMode = () => {
    const newMode = !darkMode;
    setDarkMode(newMode);
    localStorage.setItem("darkMode", newMode.toString());
  };

  const setDuration = (duration) => {
    setEmailDuration(duration);
    localStorage.setItem("emailDuration", duration);
    setIsNavExpanded(false);
  };

  useEffect(() => {
    document.body.classList.toggle("dark-mode", darkMode);
  }, [darkMode]);

  useEffect(() => {
    if (account) {
      localStorage.setItem("tempMailAccount", JSON.stringify(account));
      fetchInbox();
    }
  }, [account]);

  useEffect(() => {
    localStorage.setItem("generatedEmails", JSON.stringify(generatedEmails));
  }, [generatedEmails]);

  // Auto-generate an email when on app page
  useEffect(() => {
    if (isAppPage && !account && generatedEmails.length === 0) {
      createNewAccount(true);
    }
  }, [isAppPage]);

  const createNewAccount = async (isAutoGenerated = false) => {
    setIsLoading(true);
    setError(null);
    
    try {
      const res = await axios.post(`${API_BASE}/accounts/create`);
      
      const now = new Date();
      let expirationTime;
      
      const durationToUse = isAutoGenerated ? "1hour" : emailDuration;
      
      switch(durationToUse) {
        case "10min":
          expirationTime = new Date(now.getTime() + 10 * 60000);
          break;
        case "1hour":
          expirationTime = new Date(now.getTime() + 60 * 60000);
          break;
        case "24hour":
          expirationTime = new Date(now.getTime() + 24 * 60 * 60000);
          break;
        case "max":
          expirationTime = new Date(now.getTime() + 3650 * 24 * 60 * 60000);
          break;
        default:
          expirationTime = new Date(now.getTime() + 60 * 60000);
      }
      
      const accountData = {
        ...res.data,
        expiration: expirationTime.toISOString(),
        isAutoGenerated
      };
      
      setAccount(accountData);
      
      if (!generatedEmails.some(email => email.address === accountData.email)) {
        setGeneratedEmails(prev => [...prev, {
          address: accountData.email,
          expiration: accountData.expiration,
          createdAt: new Date().toISOString()
        }]);
      }
      
      setMessages([]);
    } catch (err) {
      setError({ message: err.response?.data?.error || "Account creation failed" });
    } finally {
      setIsLoading(false);
    }
  };

  const switchAccount = (emailAddress) => {
    const emailAccount = generatedEmails.find(email => email.address === emailAddress);
    if (emailAccount) {
      setAccount({
        email: emailAccount.address,
        expiration: emailAccount.expiration,
        token: account?.token || ""
      });
    }
  };

  const deleteEmail = (emailAddress) => {
    setGeneratedEmails(prev => prev.filter(email => email.address !== emailAddress));
    
    if (account && account.email === emailAddress) {
      const remainingEmails = generatedEmails.filter(email => email.address !== emailAddress);
      if (remainingEmails.length > 0) {
        switchAccount(remainingEmails[0].address);
      } else {
        setAccount(null);
        createNewAccount(true);
      }
    }
  };

  const fetchInbox = async () => {
    if (!account?.token) return;
    
    if (account.expiration) {
      const now = new Date();
      const expiration = new Date(account.expiration);
      
      if (now > expiration) {
        setError({ message: "Email address has expired. Please create a new one." });
        localStorage.removeItem("tempMailAccount");
        setAccount(null);
        return;
      }
    }
    
    try {
      const res = await axios.get(`${API_BASE}/inbox/${account.token}`);
      const inboxArray = Array.isArray(res.data) ? res.data : res.data?.messages || [];
      setMessages(inboxArray);
      setError(null);
    } catch (err) {
      let errorMessage = err.response?.data?.error || "Failed to load inbox";
      if (errorMessage.includes("expired") || err.response?.status === 401) {
        errorMessage = "Session expired. Please create a new email address.";
        localStorage.removeItem("tempMailAccount");
        setAccount(null);
      }
      setError({ message: errorMessage });
    }
  };

  useEffect(() => {
    if (account) {
      const interval = setInterval(fetchInbox, 5000);
      return () => clearInterval(interval);
    }
  }, [account]);

  return (
    <div className={`container-fluid py-4 px-3 px-md-5 ${darkMode ? "dark-mode" : ""}`}>
      {/* Responsive Navbar with time options */}
      <nav className="navbar navbar-expand-lg navbar-light bg-light mb-4 rounded">
        <div className="container-fluid">
          <span className="navbar-brand me-3">New Email Duration:</span>
          <button 
            className="navbar-toggler" 
            type="button" 
            onClick={() => setIsNavExpanded(!isNavExpanded)}
            aria-label="Toggle navigation"
          >
            <span className="navbar-toggler-icon"></span>
          </button>
          <div className={`collapse navbar-collapse ${isNavExpanded ? 'show' : ''}`}>
            <div className="d-flex flex-column flex-md-row gap-2">
              <button 
                className={`btn ${emailDuration === "10min" ? "btn-primary" : "btn-outline-primary"}`}
                onClick={() => setDuration("10min")}
              >
                10 min
              </button>
              <button 
                className={`btn ${emailDuration === "1hour" ? "btn-primary" : "btn-outline-primary"}`}
                onClick={() => setDuration("1hour")}
              >
                1 hour
              </button>
              <button 
                className={`btn ${emailDuration === "24hour" ? "btn-primary" : "btn-outline-primary"}`}
                onClick={() => setDuration("24hour")}
              >
                24 hours
              </button>
              <button 
                className={`btn ${emailDuration === "max" ? "btn-primary" : "btn-outline-primary"}`}
                onClick={() => setDuration("max")}
              >
                Max Time
              </button>
            </div>
          </div>
        </div>
      </nav>

      {/* Header */}
      <header className="text-center mb-5 position-relative pt-5 pt-md-0">
        <button
          onClick={toggleDarkMode}
          className="theme-toggle-btn position-absolute top-0 end-0 mt-3 me-3"
          aria-label={darkMode ? "Switch to light mode" : "Switch to dark mode"}
        >
          {darkMode ? <i className="bi bi-sun-fill"></i> : <i className="bi bi-moon-fill"></i>}
        </button>

        <h1 className="fw-bold display-5">TempMail Pro</h1>
        <p className="text-muted lead">Disposable Email Service</p>
      </header>

      {/* Error Handler */}
      {error && (
        <div className="alert alert-danger alert-dismissible fade show" role="alert">
          <strong>Error:</strong> {error.message}
          <button type="button" className="btn-close" onClick={() => setError(null)} aria-label="Close"></button>
          <button className="btn btn-sm btn-warning ms-2" onClick={fetchInbox}>
            Retry
          </button>
        </div>
      )}

      {/* Active Email Card */}
      {account && (
        <div className="row justify-content-center mb-4">
          <div className="col-12 col-md-8 col-lg-6">
            <EmailCard
              email={account.email}
              expiration={account.expiration}
              isActive={true}
            />
          </div>
        </div>
      )}
      
      {/* TempMail Section */}
      {!account ? (
        <div className="d-flex justify-content-center my-5 py-5">
          <button
            className="btn btn-primary btn-lg px-5 py-3 fw-bold"
            onClick={() => createNewAccount(false)}
            disabled={isLoading}
          >
            {isLoading ? (
              <>
                <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                Creating...
              </>
            ) : "Create Temporary Email"}
          </button>
        </div>
      ) : (
        <>
          <AccountManager 
            account={account} 
            refreshInbox={fetchInbox} 
            onNewEmail={() => createNewAccount(false)}
          />
          
          {/* Generated Emails List */}
          {generatedEmails.length > 1 && (
            <div className="mt-4">
              <h4 className="mb-3">Your Generated Emails</h4>
              <div className="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-3">
                {generatedEmails
                  .filter(email => email.address !== account.email)
                  .map((email, index) => (
                    <div key={index} className="col">
                      <EmailCard
                        email={email.address}
                        expiration={email.expiration}
                        onDelete={() => deleteEmail(email.address)}
                      />
                    </div>
                  ))
                }
              </div>
            </div>
          )}
          
          <Inbox
            messages={messages.map((msg) => ({
              ...msg,
              token: account.token,
            }))}
          />
          
          {/* Generate New Email Button */}
          <div className="text-center mt-4">
            <button
              className="btn btn-outline-primary"
              onClick={() => createNewAccount(false)}
              disabled={isLoading}
            >
              {isLoading ? (
                <>
                  <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                  Creating...
                </>
              ) : "Generate Another Email"}
            </button>
          </div>
        </>
      )}

      {/* Footer */}
      <Footer isDarkMode={darkMode} />
    </div>
  );
}

export default function App() {
  return (
    <Router>
      <Helmet>
        <title>TempMail Pro - Free Temporary Email Service</title>
        <meta
          name="description"
          content="Get a free disposable email address instantly. Protect your inbox from spam & hackers."
        />
        <meta
          name="keywords"
          content="temporary email, temp mail, disposable email, burner email"
        />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Helmet>
      
      <Routes>
        <Route path="/" element={<LandingPage />} />
        <Route path="/app" element={<TempMailApp />} />
        <Route path="/blog/:slug" element={<BlogPost />} />
        <Route path="/privacy" element={<Privacy />} />
      </Routes>
    </Router>
  );
}




