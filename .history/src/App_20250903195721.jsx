// // import React, { useState, useEffect } from "react";
// // import axios from "axios";
// // import { BrowserRouter as Router, Routes, Route, useLocation } from "react-router-dom";
// // import { Helmet } from "react-helmet";

// // import AccountManager from "./components/AccountManager.jsx";
// // import Inbox from "./components/Inbox.jsx";
// // import Privacy from "./components/Privacy";
// // import BlogPost from "./components/BlogPost";
// // import Landing from "./components/Landing.jsx";
// // import Footer from "./components/Footer";

// // const API_BASE = import.meta.env.VITE_API_BASE;

// // // Email Card Component
// // const EmailCard = ({ email, expiration, isActive = false, onDelete }) => {
// //   const formatTimeRemaining = (expirationDate) => {
// //     const now = new Date();
// //     const expiry = new Date(expirationDate);
// //     const diffMs = expiry - now;

// //     if (diffMs <= 0) return "Expired";

// //     const hours = Math.floor(diffMs / (1000 * 60 * 60));
// //     const minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));

// //     if (hours > 0) {
// //       return `${hours}h ${minutes}m remaining`;
// //     }
// //     return `${minutes}m remaining`;
// //   };

// //   return (
// //     <div className={`card h-100 ${isActive ? 'border-primary' : ''}`}>
// //       <div className="card-body">
// //         <div className="d-flex justify-content-between align-items-start mb-2">
// //           <h6 className="card-title text-truncate flex-grow-1 me-2">{email}</h6>
// //           {onDelete && (
// //             <button
// //               className="btn btn-sm btn-outline-danger"
// //               onClick={onDelete}
// //               title="Delete this email"
// //               aria-label="Delete email"
// //             >
// //               <i className="bi bi-x-lg"></i>
// //             </button>
// //           )}
// //         </div>
// //         <div className="d-flex justify-content-between align-items-center mb-2">
// //           <small className="text-muted">Expires:</small>
// //           <small className={expiration && new Date(expiration) < new Date() ? 'text-danger' : 'text-success'}>
// //             {expiration ? formatTimeRemaining(expiration) : 'Unknown'}
// //           </small>
// //         </div>
// //         {isActive && (
// //           <div className="badge bg-success w-100">Active Email</div>
// //         )}
// //       </div>
// //     </div>
// //   );
// // };

// // function TempMailApp() {
// //   const [account, setAccount] = useState(() => {
// //     const saved = localStorage.getItem("tempMailAccount");
// //     return saved ? JSON.parse(saved) : null;
// //   });
// //   const [generatedEmails, setGeneratedEmails] = useState(() => {
// //     const saved = localStorage.getItem("generatedEmails");
// //     return saved ? JSON.parse(saved) : [];
// //   });
// //   const [messages, setMessages] = useState([]);
// //   const [isLoading, setIsLoading] = useState(false);
// //   const [error, setError] = useState(null);
// //   const [darkMode, setDarkMode] = useState(() => {
// //     const saved = localStorage.getItem("darkMode");
// //     return saved === "true";
// //   });
// //   const [emailDuration, setEmailDuration] = useState(() => {
// //     const saved = localStorage.getItem("emailDuration");
// //     return saved || "1hour";
// //   });
// //   const [isNavExpanded, setIsNavExpanded] = useState(false);

// //   const location = useLocation();
// //   const isAppPage = location.pathname === "/app";

// //   const toggleDarkMode = () => {
// //     const newMode = !darkMode;
// //     setDarkMode(newMode);
// //     localStorage.setItem("darkMode", newMode.toString());
// //   };

// //   const setDuration = (duration) => {
// //     setEmailDuration(duration);
// //     localStorage.setItem("emailDuration", duration);
// //     setIsNavExpanded(false);
// //   };

// //   useEffect(() => {
// //     document.body.classList.toggle("dark-mode", darkMode);
// //   }, [darkMode]);

// //   useEffect(() => {
// //     if (account) {
// //       localStorage.setItem("tempMailAccount", JSON.stringify(account));
// //       fetchInbox();
// //     }
// //   }, [account]);

// //   useEffect(() => {
// //     localStorage.setItem("generatedEmails", JSON.stringify(generatedEmails));
// //   }, [generatedEmails]);

// //   // Auto-generate an email when on app page
// //   useEffect(() => {
// //     if (isAppPage && !account && generatedEmails.length === 0) {
// //       createNewAccount(true);
// //     }
// //   }, [isAppPage]);

// //   const createNewAccount = async (isAutoGenerated = false) => {
// //     setIsLoading(true);
// //     setError(null);

// //     try {
// //       const res = await axios.post(`${API_BASE}/accounts/create`);

// //       const now = new Date();
// //       let expirationTime;

// //       const durationToUse = isAutoGenerated ? "1hour" : emailDuration;

// //       switch (durationToUse) {
// //         case "10min":
// //           expirationTime = new Date(now.getTime() + 10 * 60000);
// //           break;
// //         case "1hour":
// //           expirationTime = new Date(now.getTime() + 60 * 60000);
// //           break;
// //         case "24hour":
// //           expirationTime = new Date(now.getTime() + 24 * 60 * 60000);
// //           break;
// //         case "max":
// //           expirationTime = new Date(now.getTime() + 3650 * 24 * 60 * 60000);
// //           break;
// //         default:
// //           expirationTime = new Date(now.getTime() + 60 * 60000);
// //       }

// //       const accountData = {
// //         ...res.data,
// //         expiration: expirationTime.toISOString(),
// //         isAutoGenerated
// //       };

// //       setAccount(accountData);

// //       if (!generatedEmails.some(email => email.address === accountData.email)) {
// //         setGeneratedEmails(prev => [...prev, {
// //           address: accountData.email,
// //           expiration: accountData.expiration,
// //           createdAt: new Date().toISOString()
// //         }]);
// //       }

// //       setMessages([]);
// //     } catch (err) {
// //       setError({ message: err.response?.data?.error || "Account creation failed" });
// //     } finally {
// //       setIsLoading(false);
// //     }
// //   };

// //   const switchAccount = (emailAddress) => {
// //     const emailAccount = generatedEmails.find(email => email.address === emailAddress);
// //     if (emailAccount) {
// //       setAccount({
// //         email: emailAccount.address,
// //         expiration: emailAccount.expiration,
// //         token: account?.token || ""
// //       });
// //     }
// //   };

// //   const deleteEmail = (emailAddress) => {
// //     setGeneratedEmails(prev => prev.filter(email => email.address !== emailAddress));

// //     if (account && account.email === emailAddress) {
// //       const remainingEmails = generatedEmails.filter(email => email.address !== emailAddress);
// //       if (remainingEmails.length > 0) {
// //         switchAccount(remainingEmails[0].address);
// //       } else {
// //         setAccount(null);
// //         createNewAccount(true);
// //       }
// //     }
// //   };

// //   const fetchInbox = async () => {
// //     if (!account?.token) return;

// //     if (account.expiration) {
// //       const now = new Date();
// //       const expiration = new Date(account.expiration);

// //       if (now > expiration) {
// //         setError({ message: "Email address expired. Creating new one..." });
// //         localStorage.removeItem("tempMailAccount");
// //         setAccount(null);
// //         createNewAccount(true); // auto regenerate
// //         return;
// //       }

// //     }

// //     try {
// //       const res = await axios.get(`${API_BASE}/inbox/${account.token}`);
// //       const inboxArray = Array.isArray(res.data) ? res.data : res.data?.messages || [];
// //       setMessages(inboxArray);
// //       setError(null);
// //     } catch (err) {
// //       let errorMessage = err.response?.data?.error || "Failed to load inbox";
// //       if (errorMessage.includes("expired") || err.response?.status === 401) {
// //         errorMessage = "Session expired. Please create a new email address.";
// //         localStorage.removeItem("tempMailAccount");
// //         setAccount(null);
// //       }
// //       setError({ message: errorMessage });
// //     }
// //   };

// //   useEffect(() => {
// //     if (account) {
// //       const interval = setInterval(fetchInbox, 5000);
// //       return () => clearInterval(interval);
// //     }
// //   }, [account]);

// //   return (
// //     <div className={`container-fluid py-4 px-3 px-md-5 ${darkMode ? "dark-mode" : ""}`}>
// //       {/* Responsive Navbar with time options */}
// //       <nav className="navbar navbar-expand-lg navbar-light bg-light mb-4 rounded">
// //         <div className="container-fluid">
// //           <span className="navbar-brand me-3">New Email Duration:</span>
// //           <button
// //             className="navbar-toggler"
// //             type="button"
// //             onClick={() => setIsNavExpanded(!isNavExpanded)}
// //             aria-label="Toggle navigation"
// //           >
// //             <span className="navbar-toggler-icon"></span>
// //           </button>
// //           <div className={`collapse navbar-collapse ${isNavExpanded ? 'show' : ''}`}>
// //             <div className="d-flex flex-column flex-md-row gap-2">
// //               <button
// //                 className={`btn ${emailDuration === "10min" ? "btn-primary" : "btn-outline-primary"}`}
// //                 onClick={() => setDuration("10min")}
// //               >
// //                 10 min
// //               </button>
// //               <button
// //                 className={`btn ${emailDuration === "1hour" ? "btn-primary" : "btn-outline-primary"}`}
// //                 onClick={() => setDuration("1hour")}
// //               >
// //                 1 hour
// //               </button>
// //               <button
// //                 className={`btn ${emailDuration === "24hour" ? "btn-primary" : "btn-outline-primary"}`}
// //                 onClick={() => setDuration("24hour")}
// //               >
// //                 24 hours
// //               </button>
// //               <button
// //                 className={`btn ${emailDuration === "max" ? "btn-primary" : "btn-outline-primary"}`}
// //                 onClick={() => setDuration("max")}
// //               >
// //                 Max Time
// //               </button>
// //             </div>
// //           </div>
// //         </div>
// //       </nav>

// //       {/* Header */}
// //       <header className="text-center mb-5 position-relative pt-5 pt-md-0">
// //         <button
// //           onClick={toggleDarkMode}
// //           className="theme-toggle-btn position-absolute top-0 end-0 mt-3 me-3"
// //           aria-label={darkMode ? "Switch to light mode" : "Switch to dark mode"}
// //         >
// //           {darkMode ? <i className="bi bi-sun-fill"></i> : <i className="bi bi-moon-fill"></i>}
// //         </button>

// //         <h1 className="fw-bold display-5">TempMail Pro</h1>
// //         <p className="text-muted lead">Disposable Email Service</p>
// //       </header>

// //       {/* Error Handler */}
// //       {error && (
// //         <div className="alert alert-danger alert-dismissible fade show" role="alert">
// //           <strong>Error:</strong> {error.message}
// //           <button type="button" className="btn-close" onClick={() => setError(null)} aria-label="Close"></button>
// //           <button className="btn btn-sm btn-warning ms-2" onClick={fetchInbox}>
// //             Retry
// //           </button>
// //         </div>
// //       )}

// //       {/* Active Email Card */}
// //       {account && (
// //         <div className="row justify-content-center mb-4">
// //           <div className="col-12 col-md-8 col-lg-6">
// //             <EmailCard
// //               email={account.email}
// //               expiration={account.expiration}
// //               isActive={true}
// //             />
// //           </div>
// //         </div>
// //       )}

// //       {/* TempMail Section */}
// //       {!account ? (
// //         <div className="d-flex justify-content-center my-5 py-5">
// //           <button
// //             className="btn btn-primary btn-lg px-5 py-3 fw-bold"
// //             onClick={() => createNewAccount(false)}
// //             disabled={isLoading}
// //           >
// //             {isLoading ? (
// //               <>
// //                 <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
// //                 Creating...
// //               </>
// //             ) : "Create Temporary Email"}
// //           </button>
// //         </div>
// //       ) : (
// //         <>
// //           <AccountManager
// //             account={account}
// //             refreshInbox={fetchInbox}
// //             onNewEmail={() => createNewAccount(false)}
// //           />

// //           {/* Generated Emails List */}
// //           {generatedEmails.length > 1 && (
// //             <div className="mt-4">
// //               <h4 className="mb-3">Your Generated Emails</h4>
// //               <div className="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-3">
// //                 {generatedEmails
// //                   .filter(email => email.address !== account.email)
// //                   .map((email, index) => (
// //                     <div key={index} className="col">
// //                       <EmailCard
// //                         email={email.address}
// //                         expiration={email.expiration}
// //                         onDelete={() => deleteEmail(email.address)}
// //                       />
// //                     </div>
// //                   ))
// //                 }
// //               </div>
// //             </div>
// //           )}

// //           <Inbox
// //             messages={messages.map((msg) => ({
// //               ...msg,
// //               token: account.token,
// //             }))}
// //           />

// //           {/* Generate New Email Button */}
// //           <div className="text-center mt-4">
// //             <button
// //               className="btn btn-outline-primary"
// //               onClick={() => createNewAccount(false)}
// //               disabled={isLoading}
// //             >
// //               {isLoading ? (
// //                 <>
// //                   <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
// //                   Creating...
// //                 </>
// //               ) : "Generate Another Email"}
// //             </button>
// //           </div>
// //         </>
// //       )}

// //       {/* Footer */}
// //       <Footer isDarkMode={darkMode} />
// //     </div>
// //   );
// // }

// // function App() {
// //   return (
// //     <Router>
// //         <Helmet>
// //         <title>
// //           {account
// //             ? `TempMail Pro - ${account.email}`
// //             : "TempMail Pro - Free Temporary Email Service"}
// //         </title>
// //         <meta
// //           name="description"
// //           content={
// //             account
// //               ? `Your temporary email address is ${account.email}. Protect your inbox with TempMail Pro.`
// //               : "Get free disposable email addresses with TempMail Pro. Protect your inbox from spam and stay secure."
// //           }
// //         />
// //         <link rel="canonical" href={window.location.href} />
// //       </Helmet>

// //       <Routes>
// //         <Route path="/" element={<Landing />} />
// //         <Route path="/app" element={<TempMailApp />} />
// //         <Route path="/blog/:slug" element={<BlogPost />} />
// //         <Route path="/privacy" element={<Privacy />} />
// //       </Routes>
// //     </Router>
// //   );
// // }

// // export default App;




















// import React, { useState, useEffect } from "react";
// import axios from "axios";
// import { BrowserRouter as Router, Routes, Route, useLocation } from "react-router-dom";
// import { Helmet, HelmetProvider } from "react-helmet-async";

// import AccountManager from "./components/AccountManager.jsx";
// import Inbox from "./components/Inbox.jsx";
// import Privacy from "./components/Privacy";
// import BlogPost from "./components/BlogPost";
// import Landing from "./components/Landing.jsx";
// import Footer from "./components/Footer";

// const API_BASE = import.meta.env.VITE_API_BASE;

// // Email Card Component
// const EmailCard = ({ email, expiration, isActive = false, onDelete }) => {
//   const formatTimeRemaining = (expirationDate) => {
//     const now = new Date();
//     const expiry = new Date(expirationDate);
//     const diffMs = expiry - now;

//     if (diffMs <= 0) return "Expired";

//     const hours = Math.floor(diffMs / (1000 * 60 * 60));
//     const minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));

//     if (hours > 0) {
//       return `${hours}h ${minutes}m remaining`;
//     }
//     return `${minutes}m remaining`;
//   };

//   return (
//     <div className={`card h-100 ${isActive ? 'border-primary' : ''}`}>
//       <div className="card-body">
//         <div className="d-flex justify-content-between align-items-start mb-2">
//           <h6 className="card-title text-truncate flex-grow-1 me-2">{email}</h6>
//           {onDelete && (
//             <button
//               className="btn btn-sm btn-outline-danger"
//               onClick={onDelete}
//               title="Delete this email"
//               aria-label="Delete email"
//             >
//               <i className="bi bi-x-lg"></i>
//             </button>
//           )}
//         </div>
//         <div className="d-flex justify-content-between align-items-center mb-2">
//           <small className="text-muted">Expires:</small>
//           <small className={expiration && new Date(expiration) < new Date() ? 'text-danger' : 'text-success'}>
//             {expiration ? formatTimeRemaining(expiration) : 'Unknown'}
//           </small>
//         </div>
//         {isActive && (
//           <div className="badge bg-success w-100">Active Email</div>
//         )}
//       </div>
//     </div>
//   );
// };

// function TempMailApp() {
//   const [account, setAccount] = useState(() => {
//     const saved = localStorage.getItem("tempMailAccount");
//     return saved ? JSON.parse(saved) : null;
//   });
//   const [generatedEmails, setGeneratedEmails] = useState(() => {
//     const saved = localStorage.getItem("generatedEmails");
//     return saved ? JSON.parse(saved) : [];
//   });
//   const [messages, setMessages] = useState([]);
//   const [isLoading, setIsLoading] = useState(false);
//   const [error, setError] = useState(null);
//   const [darkMode, setDarkMode] = useState(() => {
//     const saved = localStorage.getItem("darkMode");
//     return saved === "true";
//   });
//   const [emailDuration, setEmailDuration] = useState(() => {
//     const saved = localStorage.getItem("emailDuration");
//     return saved || "1hour";
//   });
//   const [isNavExpanded, setIsNavExpanded] = useState(false);

//   const location = useLocation();
//   const isAppPage = location.pathname === "/app";

//   const toggleDarkMode = () => {
//     const newMode = !darkMode;
//     setDarkMode(newMode);
//     localStorage.setItem("darkMode", newMode.toString());
//   };

//   const setDuration = (duration) => {
//     setEmailDuration(duration);
//     localStorage.setItem("emailDuration", duration);
//     setIsNavExpanded(false);
//   };

//   useEffect(() => {
//     document.body.classList.toggle("dark-mode", darkMode);
//   }, [darkMode]);

//   useEffect(() => {
//     if (account) {
//       localStorage.setItem("tempMailAccount", JSON.stringify(account));
//       fetchInbox();
//     }
//   }, [account]);

//   useEffect(() => {
//     localStorage.setItem("generatedEmails", JSON.stringify(generatedEmails));
//   }, [generatedEmails]);

//   // Auto-generate an email when on app page
//   useEffect(() => {
//     if (isAppPage && !account && generatedEmails.length === 0) {
//       createNewAccount(true);
//     }
//   }, [isAppPage]);

//   const createNewAccount = async (isAutoGenerated = false) => {
//     setIsLoading(true);
//     setError(null);

//     try {
//       const res = await axios.post(`${API_BASE}/accounts/create`);

//       const now = new Date();
//       let expirationTime;

//       const durationToUse = isAutoGenerated ? "1hour" : emailDuration;

//       switch (durationToUse) {
//         case "10min":
//           expirationTime = new Date(now.getTime() + 10 * 60000);
//           break;
//         case "1hour":
//           expirationTime = new Date(now.getTime() + 60 * 60000);
//           break;
//         case "24hour":
//           expirationTime = new Date(now.getTime() + 24 * 60 * 60000);
//           break;
//         case "max":
//           expirationTime = new Date(now.getTime() + 3650 * 24 * 60 * 60000);
//           break;
//         default:
//           expirationTime = new Date(now.getTime() + 60 * 60000);
//       }

//       const accountData = {
//         ...res.data,
//         expiration: expirationTime.toISOString(),
//         isAutoGenerated
//       };

//       setAccount(accountData);

//       if (!generatedEmails.some(email => email.address === accountData.email)) {
//         setGeneratedEmails(prev => [...prev, {
//           address: accountData.email,
//           expiration: accountData.expiration,
//           createdAt: new Date().toISOString()
//         }]);
//       }

//       setMessages([]);
//     } catch (err) {
//       setError({ message: err.response?.data?.error || "Account creation failed" });
//     } finally {
//       setIsLoading(false);
//     }
//   };

//   const switchAccount = (emailAddress) => {
//     const emailAccount = generatedEmails.find(email => email.address === emailAddress);
//     if (emailAccount) {
//       setAccount({
//         email: emailAccount.address,
//         expiration: emailAccount.expiration,
//         token: account?.token || ""
//       });
//     }
//   };

//   const deleteEmail = (emailAddress) => {
//     setGeneratedEmails(prev => prev.filter(email => email.address !== emailAddress));

//     if (account && account.email === emailAddress) {
//       const remainingEmails = generatedEmails.filter(email => email.address !== emailAddress);
//       if (remainingEmails.length > 0) {
//         switchAccount(remainingEmails[0].address);
//       } else {
//         setAccount(null);
//         createNewAccount(true);
//       }
//     }
//   };

//   const fetchInbox = async () => {
//     if (!account?.token) return;

//     if (account.expiration) {
//       const now = new Date();
//       const expiration = new Date(account.expiration);

//       if (now > expiration) {
//         setError({ message: "Email address expired. Creating new one..." });
//         localStorage.removeItem("tempMailAccount");
//         setAccount(null);
//         createNewAccount(true); // auto regenerate
//         return;
//       }
//     }

//     try {
//       const res = await axios.get(`${API_BASE}/inbox/${account.token}`);
//       const inboxArray = Array.isArray(res.data) ? res.data : res.data?.messages || [];
//       setMessages(inboxArray);
//       setError(null);
//     } catch (err) {
//       let errorMessage = err.response?.data?.error || "Failed to load inbox";
//       if (errorMessage.includes("expired") || err.response?.status === 401) {
//         errorMessage = "Session expired. Please create a new email address.";
//         localStorage.removeItem("tempMailAccount");
//         setAccount(null);
//       }
//       setError({ message: errorMessage });
//     }
//   };

//   useEffect(() => {
//     if (account) {
//       const interval = setInterval(fetchInbox, 5000);
//       return () => clearInterval(interval);
//     }
//   }, [account]);

//   return (
//     <div className={`container-fluid py-4 px-3 px-md-5 ${darkMode ? "dark-mode" : ""}`}>
//       {/* Dynamic SEO for TempMailApp */}
//       <Helmet>
//         <title>
//           {account
//             ? `TempMail Pro - ${account.email}`
//             : "TempMail Pro - Free Temporary Email Service"}
//         </title>
//         <meta
//           name="description"
//           content={
//             account
//               ? `Your temporary email address is ${account.email}. Protect your inbox with TempMail Pro.`
//               : "Get free disposable email addresses with TempMail Pro. Protect your inbox from spam and stay secure."
//           }
//         />
//         <meta property="og:title" content={account ? `TempMail Pro - ${account.email}` : "TempMail Pro - Free Temporary Email Service"} />
//         <meta property="og:description" content={account ? `Your temporary email address is ${account.email}. Protect your inbox with TempMail Pro.` : "Get free disposable email addresses with TempMail Pro. Protect your inbox from spam and stay secure."} />
//         <meta property="og:url" content={window.location.href} />
//         <link rel="canonical" href={window.location.href} />
//       </Helmet>

//       {/* Responsive Navbar with time options */}
//       <nav className="navbar navbar-expand-lg navbar-light bg-light mb-4 rounded">
//         <div className="container-fluid">
//           <span className="navbar-brand me-3">New Email Duration:</span>
//           <button
//             className="navbar-toggler"
//             type="button"
//             onClick={() => setIsNavExpanded(!isNavExpanded)}
//             aria-label="Toggle navigation"
//           >
//             <span className="navbar-toggler-icon"></span>
//           </button>
//           <div className={`collapse navbar-collapse ${isNavExpanded ? 'show' : ''}`}>
//             <div className="d-flex flex-column flex-md-row gap-2">
//               <button
//                 className={`btn ${emailDuration === "10min" ? "btn-primary" : "btn-outline-primary"}`}
//                 onClick={() => setDuration("10min")}
//               >
//                 10 min
//               </button>
//               <button
//                 className={`btn ${emailDuration === "1hour" ? "btn-primary" : "btn-outline-primary"}`}
//                 onClick={() => setDuration("1hour")}
//               >
//                 1 hour
//               </button>
//               <button
//                 className={`btn ${emailDuration === "24hour" ? "btn-primary" : "btn-outline-primary"}`}
//                 onClick={() => setDuration("24hour")}
//               >
//                 24 hours
//               </button>
//               <button
//                 className={`btn ${emailDuration === "max" ? "btn-primary" : "btn-outline-primary"}`}
//                 onClick={() => setDuration("max")}
//               >
//                 Max Time
//               </button>
//             </div>
//           </div>
//         </div>
//       </nav>

//       {/* Header */}
//       <header className="text-center mb-5 position-relative pt-5 pt-md-0">
//         <button
//           onClick={toggleDarkMode}
//           className="theme-toggle-btn position-absolute top-0 end-0 mt-3 me-3"
//           aria-label={darkMode ? "Switch to light mode" : "Switch to dark mode"}
//         >
//           {darkMode ? <i className="bi bi-sun-fill"></i> : <i className="bi bi-moon-fill"></i>}
//         </button>

//         <h1 className="fw-bold display-5">TempMail Pro</h1>
//         <p className="text-muted lead">Disposable Email Service</p>
//       </header>

//       {/* Error Handler */}
//       {error && (
//         <div className="alert alert-danger alert-dismissible fade show" role="alert">
//           <strong>Error:</strong> {error.message}
//           <button type="button" className="btn-close" onClick={() => setError(null)} aria-label="Close"></button>
//           <button className="btn btn-sm btn-warning ms-2" onClick={fetchInbox}>
//             Retry
//           </button>
//         </div>
//       )}

//       {/* Active Email Card */}
//       {account && (
//         <div className="row justify-content-center mb-4">
//           <div className="col-12 col-md-8 col-lg-6">
//             <EmailCard
//               email={account.email}
//               expiration={account.expiration}
//               isActive={true}
//             />
//           </div>
//         </div>
//       )}

//       {/* TempMail Section */}
//       {!account ? (
//         <div className="d-flex justify-content-center my-5 py-5">
//           <button
//             className="btn btn-primary btn-lg px-5 py-3 fw-bold"
//             onClick={() => createNewAccount(false)}
//             disabled={isLoading}
//           >
//             {isLoading ? (
//               <>
//                 <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
//                 Creating...
//               </>
//             ) : "Create Temporary Email"}
//           </button>
//         </div>
//       ) : (
//         <>
//           <AccountManager
//             account={account}
//             refreshInbox={fetchInbox}
//             onNewEmail={() => createNewAccount(false)}
//           />

//           {/* Generated Emails List */}
//           {generatedEmails.length > 1 && (
//             <div className="mt-4">
//               <h4 className="mb-3">Your Generated Emails</h4>
//               <div className="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-3">
//                 {generatedEmails
//                   .filter(email => email.address !== account.email)
//                   .map((email, index) => (
//                     <div key={index} className="col">
//                       <EmailCard
//                         email={email.address}
//                         expiration={email.expiration}
//                         onDelete={() => deleteEmail(email.address)}
//                       />
//                     </div>
//                   ))
//                 }
//               </div>
//             </div>
//           )}

//           <Inbox
//             messages={messages.map((msg) => ({
//               ...msg,
//               token: account.token,
//             }))}
//           />

//           {/* Generate New Email Button */}
//           <div className="text-center mt-4">
//             <button
//               className="btn btn-outline-primary"
//               onClick={() => createNewAccount(false)}
//               disabled={isLoading}
//             >
//               {isLoading ? (
//                 <>
//                   <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
//                   Creating...
//                 </>
//               ) : "Generate Another Email"}
//             </button>
//           </div>
//         </>
//       )}

//       {/* Footer */}
//       <Footer isDarkMode={darkMode} />
//     </div>
//   );
// }

// // Error Boundary Component to catch errors
// class ErrorBoundary extends React.Component {
//   constructor(props) {
//     super(props);
//     this.state = { hasError: false, error: null };
//   }

//   static getDerivedStateFromError(error) {
//     return { hasError: true, error };
//   }

//   componentDidCatch(error, errorInfo) {
//     console.error("Error caught by boundary:", error, errorInfo);
//   }

//   render() {
//     if (this.state.hasError) {
//       return (
//         <div className="container my-5">
//           <div className="alert alert-danger">
//             <h2>Something went wrong.</h2>
//             <p>{this.state.error?.message || "An unexpected error occurred"}</p>
//             <button 
//               className="btn btn-primary"
//               onClick={() => this.setState({ hasError: false, error: null })}
//             >
//               Try again
//             </button>
//           </div>
//         </div>
//       );
//     }

//     return this.props.children;
//   }
// }

// function App() {
//   return (
//     <HelmetProvider>
//       <ErrorBoundary>
//         <Router>
//           {/* Global SEO for all pages */}
//           <Helmet>
//             <title>TempMail Pro - Free Temporary Email Service</title>
//             <meta
//               name="description"
//               content="TempMail Pro provides free disposable email addresses to protect your inbox from spam. Create, use, and delete emails instantly."
//             />
//             <meta
//               name="keywords"
//               content="temporary email, disposable email, temp mail, spam protection, free email service"
//             />
            
//             {/* Open Graph */}
//             <meta property="og:title" content="TempMail Pro - Free Disposable Email Service" />
//             <meta property="og:description" content="Protect your inbox with free disposable emails from TempMail Pro." />
//             <meta property="og:image" content="/images/temp-mail-promo.png" />
//             <meta property="og:url" content="https://tempmailpro.com" />
//             <meta property="og:type" content="website" />

//             {/* Twitter */}
//             <meta name="twitter:card" content="summary_large_image" />
//             <meta name="twitter:title" content="TempMail Pro - Free Disposable Email Service" />
//             <meta name="twitter:description" content="Protect your inbox with free disposable emails from TempMail Pro." />
//             <meta name="twitter:image" content="/images/temp-mail-promo.png" />
//           </Helmet>

//           <Routes>
//             <Route path="/" element={<Landing />} />
//             <Route path="/app" element={<TempMailApp />} />
//             <Route path="/blog/:slug" element={<BlogPost />} />
//             <Route path="/privacy" element={<Privacy />} />
//           </Routes>
//         </Router>
//       </ErrorBoundary>
//     </HelmetProvider>
//   );
// }

// export default App;








import React, { useState, useEffect, useRef } from "react";
import axios from "axios";
import { BrowserRouter as Router, Routes, Route, useLocation } from "react-router-dom";
import { Helmet, HelmetProvider } from "react-helmet-async";

import AccountManager from "./components/AccountManager.jsx";
import Inbox from "./components/Inbox.jsx";
import Privacy from "./components/Privacy";
import BlogPost from "./components/BlogPost";
import Landing from "./components/Landing.jsx";
import Footer from "./components/Footer";
import EmailCard from "./components/EmailCard";
import Navbar from "./components/Navbar";
import Header from "./components/Header";
import ErrorAlert from "./components/ErrorAlert";
import { useTranslation } from "react-i18next";
const API_BASE = import.meta.env.VITE_API_BASE;

// Duration constants for better maintainability
const DURATIONS = {
  "10min": 10 * 60 * 1000,
  "1hour": 60 * 60 * 1000,
  "24hour": 24 * 60 * 60 * 1000,
  "max": 3650 * 24 * 60 * 60 * 1000 // Approximately 10 years
};

// Polling intervals
const POLLING_INTERVALS = {
  FAST: 5000,     // 5 seconds
  NORMAL: 10000,  // 10 seconds
  SLOW: 30000     // 30 seconds
};

function TempMailApp() {
    const { t } = useTranslation();
  const [account, setAccount] = useState(() => {
    const saved = localStorage.getItem("tempMailAccount");
    return saved ? JSON.parse(saved) : null;
  });
  const [generatedEmails, setGeneratedEmails] = useState(() => {
    const saved = localStorage.getItem("generatedEmails");
    return saved ? JSON.parse(saved) : [];
  });
  const [messages, setMessages] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [darkMode, setDarkMode] = useState(() => {
    const saved = localStorage.getItem("darkMode");
    return saved === "true";
  });
  const [emailDuration, setEmailDuration] = useState(() => {
    const saved = localStorage.getItem("emailDuration");
    return saved || "1hour";
  });
  const [pollingInterval, setPollingInterval] = useState(() => {
    const saved = localStorage.getItem("pollingInterval");
    return saved ? parseInt(saved) : POLLING_INTERVALS.NORMAL;
  });
  const [isNavExpanded, setIsNavExpanded] = useState(false);
  const [isLoadingOverlay, setIsLoadingOverlay] = useState(false);

  const location = useLocation();
  const isAppPage = location.pathname === "/app";
  const currentUrl = `${window.location.origin}${location.pathname}${location.search}`;

  // Use refs to access current state in intervals
  const accountRef = useRef(account);
  const pollingIntervalRef = useRef(pollingInterval);

  useEffect(() => {
    accountRef.current = account;
  }, [account]);

  useEffect(() => {
    pollingIntervalRef.current = pollingInterval;
  }, [pollingInterval]);

  const toggleDarkMode = () => {
    const newMode = !darkMode;
    setDarkMode(newMode);
    localStorage.setItem("darkMode", newMode.toString());
    document.documentElement.setAttribute('data-theme', newMode ? 'dark' : 'light');
  };

  const setDuration = (duration) => {
    setEmailDuration(duration);
    localStorage.setItem("emailDuration", duration);
    // Removed auto-collapse for better UX
  };

  const setPollingSpeed = (speed) => {
    setPollingInterval(speed);
    localStorage.setItem("pollingInterval", speed.toString());
  };

  useEffect(() => {
    document.documentElement.setAttribute('data-theme', darkMode ? 'dark' : 'light');
  }, [darkMode]);

  useEffect(() => {
    if (account) {
      localStorage.setItem("tempMailAccount", JSON.stringify(account));
      // Load messages from localStorage if available
      const savedMessages = localStorage.getItem(`inbox-${account.token}`);
      if (savedMessages) {
        setMessages(JSON.parse(savedMessages));
      }
      fetchInbox();
    }
  }, [account]);

  useEffect(() => {
    localStorage.setItem("generatedEmails", JSON.stringify(generatedEmails));
  }, [generatedEmails]);

  useEffect(() => {
    if (account) {
      // Store only the last 20 messages to prevent localStorage bloat
      const limitedMessages = messages.slice(-20);
      localStorage.setItem(`inbox-${account.token}`, JSON.stringify(limitedMessages));
    }
  }, [messages, account]);

  // Auto-generate an email when on app page
  useEffect(() => {
    if (isAppPage && !account && generatedEmails.length === 0) {
      createNewAccount(true);
    }
  }, [isAppPage]);

  const createNewAccount = async (isAutoGenerated = false) => {
    setIsLoading(true);
    setError(null);

    try {
      const res = await axios.post(`${API_BASE}/accounts/create`);

      const now = new Date();
      const expirationTime = new Date(now.getTime() + DURATIONS[isAutoGenerated ? "1hour" : emailDuration]);

      const accountData = {
        ...res.data,
        expiration: expirationTime.toISOString(),
        isAutoGenerated
      };

      setAccount(accountData);

      if (!generatedEmails.some(email => email.address === accountData.email)) {
        setGeneratedEmails(prev => [...prev, {
          address: accountData.email,
          expiration: accountData.expiration,
          createdAt: new Date().toISOString(),
          token: accountData.token
        }]);
      }

      setMessages([]);
    } catch (err) {
      setError({ message: err.response?.data?.error || "Account creation failed" });
      console.error("Account creation failed:", err);
    } finally {
      setIsLoading(false);
    }
  };

  const switchAccount = (emailAddress) => {
    const emailAccount = generatedEmails.find(email => email.address === emailAddress);
    if (emailAccount) {
      setAccount({
        email: emailAccount.address,
        expiration: emailAccount.expiration,
        token: emailAccount.token
      });
    }
  };

  const deleteEmail = (emailAddress) => {
    setGeneratedEmails(prev => {
      const remaining = prev.filter(email => email.address !== emailAddress);
      
      // Check if we're deleting the current account
      if (accountRef.current && accountRef.current.email === emailAddress) {
        if (remaining.length > 0) {
          // Switch to the first remaining email
          switchAccount(remaining[0].address);
        } else {
          // No emails left, create a new one
          setAccount(null);
          createNewAccount(true);
        }
      }
      
      return remaining;
    });
  };

  const fetchInbox = async () => {
    if (!accountRef.current?.token) return;

    if (accountRef.current.expiration) {
      const now = new Date();
      const expiration = new Date(accountRef.current.expiration);

      if (now > expiration) {
        // Silently regenerate without showing error
        localStorage.removeItem("tempMailAccount");
        setAccount(null);
        createNewAccount(true);
        return;
      }
    }

    setIsLoadingOverlay(true);
    try {
      const res = await axios.get(`${API_BASE}/inbox/${accountRef.current.token}`);
      const inboxArray = Array.isArray(res.data) ? res.data : res.data?.messages || [];
      
      // Store only the last 20 messages to prevent localStorage bloat
      const limitedMessages = inboxArray.slice(-20);
      setMessages(limitedMessages);
      setError(null);
    } catch (err) {
      let errorMessage = err.response?.data?.error || "Failed to load inbox";
      console.error("Inbox fetch failed:", err);
      
      if (errorMessage.includes("expired") || err.response?.status === 401) {
        errorMessage = "Session expired. Please create a new email address.";
        localStorage.removeItem("tempMailAccount");
        setAccount(null);
      }
      setError({ message: errorMessage });
    } finally {
      setIsLoadingOverlay(false);
    }
  };

  useEffect(() => {
    let intervalId = null;
    
    if (account) {
      intervalId = setInterval(() => {
        fetchInbox();
      }, pollingInterval);
    }
    
    return () => {
      if (intervalId) clearInterval(intervalId);
    };
  }, [account, pollingInterval]); // Restart interval when account or pollingInterval changes

  return (

       <div className="text-center p-6">
      <h1 className="text-2xl font-bold">{t("welcome")}</h1>
      <p className="mt-2 text-gray-600">{t("cta")}</p>
    </div> 
    <div className={`container-fluid py-4 px-3 px-md-5 ${darkMode ? "dark-mode" : ""}`}>
      {/* Dynamic SEO for TempMailApp */}
      <Helmet>
        <title>
          {account
            ? `TempMail Pro - ${account.email}`
            : "TempMail Pro - Free Temporary Email Service"}
        </title>
        <meta
          name="description"
          content={
            account
              ? `Your temporary email address is ${account.email}. Protect your inbox with TempMail Pro.`
              : "Get free disposable email addresses with TempMail Pro. Protect your inbox from spam and stay secure."
          }
        />
        <meta property="og:title" content={account ? `TempMail Pro - ${account.email}` : "TempMail Pro - Free Temporary Email Service"} />
        <meta property="og:description" content={account ? `Your temporary email address is ${account.email}. Protect your inbox with TempMail Pro.` : "Get free disposable email addresses with TempMail Pro. Protect your inbox from spam and stay secure."} />
        <meta property="og:url" content={currentUrl} />
        <link rel="canonical" href={currentUrl} />
      </Helmet>

      {/* Global Loading Overlay */}
      {isLoadingOverlay && (
        <div className="global-loading-overlay">
          <div className="spinner-border text-primary" role="status">
            <span className="visually-hidden">Loading...</span>
          </div>
        </div>
      )}

      <Navbar 
        emailDuration={emailDuration} 
        setDuration={setDuration}
        pollingInterval={pollingInterval}
        setPollingSpeed={setPollingSpeed}
        pollingIntervals={POLLING_INTERVALS}
        isNavExpanded={isNavExpanded}
        setIsNavExpanded={setIsNavExpanded}
      />

      <Header 
        darkMode={darkMode} 
        toggleDarkMode={toggleDarkMode} 
      />

      {/* Error Handler */}
      {error && (
        <ErrorAlert 
          error={error} 
          setError={setError} 
          onRetry={fetchInbox} 
        />
      )}

      {/* Active Email Card */}
      {account && (
        <div className="row justify-content-center mb-4">
          <div className="col-12 col-md-8 col-lg-6">
            <EmailCard
              email={account.email}
              expiration={account.expiration}
              isActive={true}
            />
          </div>
        </div>
      )}

      {/* TempMail Section */}
      {!account ? (
        <div className="d-flex flex-column align-items-center my-5 py-5">
          <button
            className="btn btn-primary btn-lg px-5 py-3 fw-bold mb-3"
            onClick={() => createNewAccount(false)}
            disabled={isLoading}
          >
            {isLoading ? (
              <>
                <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                Creating...
              </>
            ) : "Create Temporary Email"}
          </button>
          
          {/* Retry button for account creation errors */}
          {error && !account && (
            <div className="text-center">
              <p className="text-muted mb-2">Having trouble creating an email?</p>
              <button 
                className="btn btn-outline-danger" 
                onClick={() => createNewAccount(false)}
              >
                <i className="fas fa-redo me-2"></i>Retry
              </button>
            </div>
          )}
        </div>
      ) : (
        <>
          <AccountManager
            account={account}
            refreshInbox={fetchInbox}
            onNewEmail={() => createNewAccount(false)}
          />

          {/* Generated Emails List */}
          {generatedEmails.length > 1 && (
            <div className="mt-4">
              <h4 className="mb-3">Your Generated Emails</h4>
              <div className="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-3">
                {generatedEmails
                  .filter(email => email.address !== account.email)
                  .map((email, index) => (
                    <div key={index} className="col">
                      <EmailCard
                        email={email.address}
                        expiration={email.expiration}
                        onDelete={() => deleteEmail(email.address)}
                        onSwitch={() => switchAccount(email.address)}
                      />
                    </div>
                  ))
                }
              </div>
            </div>
          )}

          <Inbox
            messages={messages.map((msg) => ({
              ...msg,
              token: account.token,
            }))}
            onRetry={fetchInbox}
          />

          {/* Generate New Email Button */}
          <div className="text-center mt-4">
            <button
              className="btn btn-outline-primary"
              onClick={() => createNewAccount(false)}
              disabled={isLoading}
            >
              {isLoading ? (
                <>
                  <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                  Creating...
                </>
              ) : "Generate Another Email"}
            </button>
          </div>
        </>
      )}

      {/* Footer */}
      <Footer isDarkMode={darkMode} />
    </div>
  );
}

// Error Boundary Component to catch errors
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true, error };
  }

  componentDidCatch(error, errorInfo) {
    console.error("Error caught by boundary:", error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="container my-5">
          <div className="alert alert-danger">
            <h2>Something went wrong.</h2>
            <p>{this.state.error?.message || "An unexpected error occurred"}</p>
            <button 
              className="btn btn-primary"
              onClick={() => this.setState({ hasError: false, error: null })}
            >
              Try again
            </button>
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}

// Main App component without useLocation
function App() {
  return (
    <HelmetProvider>
      <ErrorBoundary>
        <Router>
          <Routes>
            <Route path="/" element={<Landing />} />
            <Route path="/app" element={<TempMailApp />} />
            <Route path="/blog/:slug" element={<BlogPost />} />
            <Route path="/privacy" element={<Privacy />} />
          </Routes>
        </Router>
      </ErrorBoundary>
    </HelmetProvider>
  );
}

export default App;